PRIM'S ALGORITHM
#include <iostream>
#include <vector>
#include <climits>
using namespace std;

const int INF = INT_MAX;
int minKey(vector<int>& key, vector<bool>& mstSet, int V) {
    int min = INF, minIndex;

    for (int v = 0; v < V; ++v) {
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            minIndex = v;
        }
    }
    return minIndex;
}
void printMST(vector<int>& parent, vector<vector<int>>& graph, int V) {
    cout << "Edge \tWeight\n";
    for (int i = 1; i < V; ++i) {
        cout << parent[i] << " - " << i << "\t" << graph[i][parent[i]] << "\n";
    }
}
void primMST(vector<vector<int>>& graph, int V) {
    vector<int> parent(V);       
    vector<int> key(V, INF);     
    vector<bool> mstSet(V, false); 
    key[0] = 0;
    parent[0] = -1; 

    for (int count = 0; count < V - 1; ++count) {
        int u = minKey(key, mstSet, V);
        mstSet[u] = true;
        for (int v = 0; v < V; ++v) {
          
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    
    printMST(parent, graph, V);
}

int main() {
    int V;
    cout << "Enter the number of vertices: ";
    cin >> V;

    vector<vector<int>> graph(V, vector<int>(V));

    cout << "Enter the adjacency matrix (0 for no edge, weight for an edge):\n";
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            cin >> graph[i][j];
        }
    }

    primMST(graph, V);

    return 0;
}
