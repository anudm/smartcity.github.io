MERGE SORT


#include <iostream>
using namespace std;


void Merge(int B[], int bSIZE1, int C[], int cSIZE1, int A[]) {
    int i = 0, j = 0, k = 0;


    while (i < bSIZE1 && j < cSIZE1) {
        if (B[i] <= C[j]) {
            A[k] = B[i];
            i++;
        } else {
            A[k] = C[j];
            j++;
        }
        k++;
    }


    while (i < bSIZE1) {
        A[k] = B[i];
        i++;
        k++;
    }


    while (j < cSIZE1) {
        A[k] = C[j];
        j++;
        k++;
    }
}


void MergeSort(int A[], int SIZE1) {
    if (SIZE1 > 1) {
        int mid = SIZE1 / 2;


        int B[mid];
        int C[SIZE1 - mid];


        for (int i = 0; i < mid; i++) {
            B[i] = A[i];
        }
        for (int i = mid; i < SIZE1; i++) {
            C[i - mid] = A[i];
        }


        MergeSort(B, mid);
        MergeSort(C, SIZE1 - mid);


        Merge(B, mid, C, SIZE1 - mid, A);
    }
}


int main() {
    int A[] = {38, 27, 43, 3, 9, 82, 10};
    int SIZE1 = sizeof(A) / sizeof(A[0]);

    cout << "Original A: ";
    for (int i = 0; i < SIZE1; i++) {
        cout << A[i] << " ";
    }

    MergeSort(A, SIZE1);

    cout << "Sorted A: ";
    for (int i = 0; i < SIZE1; i++) {
        cout << A[i] << " ";
    }
    cout << endl;

    return 0;
}


