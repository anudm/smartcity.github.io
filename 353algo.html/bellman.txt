BELLMAN FORD ALGORITHM
#include <iostream>
#include <vector>
#include <tuple>
#include <limits>
using namespace std;

const int INF = numeric_limits<int>::max();

void bellmanFord(int V, int E, int source, vector<tuple<int, int, int>>& edges) {
    
    vector<int> distance(V, INF);
    distance[source] = 0;
    for (int i = 1; i <= V - 1; ++i) {
        for (auto& edge : edges) {
            int u, v, w;
            tie(u, v, w) = edge;
            if (distance[u] != INF && distance[u] + w < distance[v]) {
                distance[v] = distance[u] + w;
            }
        }
    }
    for (auto& edge : edges) {
        int u, v, w;
        tie(u, v, w) = edge;
        if (distance[u] != INF && distance[u] + w < distance[v]) {
            cout << "Graph contains a negative-weight cycle.\n";
            return;
        }
    }
    cout << "Vertex Distance from Source:\n";
    for (int i = 0; i < V; ++i) {
        if (distance[i] == INF) {
            cout << i << " : INF\n";
        } else {
            cout << i << " : " << distance[i] << "\n";
        }
    }
}

int main() {
    int V, E;
    cout << "Enter the number of vertices: ";
    cin >> V;
    cout << "Enter the number of edges: ";
    cin >> E;

    vector<tuple<int, int, int>> edges; 

    cout << "Enter the edges (u v w):\n";
    for (int i = 0; i < E; ++i) {
        int u, v, w;
        cin >> u >> v >> w;
        edges.push_back({u, v, w});
    }

    int source;
    cout << "Enter the source vertex: ";
    cin >> source;

    bellmanFord(V, E, source, edges);

    return 0;
}
