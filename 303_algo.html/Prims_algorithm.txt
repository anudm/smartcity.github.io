#include <iostream>
#include <vector>
#include <climits>
#include <utility>
#include <queue>

using namespace std;

// Function to implement Prim's Algorithm
void primMST(const vector<vector<pair<int, int>>>& graph, int V) {
    // To store the parent of each node in the MST
    vector<int> parent(V, -1);
    
    // To store the minimum cost of each node
    vector<int> key(V, INT_MAX);
    
    // To mark whether a node is in the MST
    vector<bool> inMST(V, false);
    
    // Min-Heap (priority queue) to store the nodes, sorted by minimum key value
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    
    // Start with the 0th vertex
    key[0] = 0;
    pq.push({0, 0}); // (key, vertex)
    
    while (!pq.empty()) {
        // Get the vertex with the minimum key value
        int u = pq.top().second;
        pq.pop();
        
        // Mark the vertex as included in MST
        inMST[u] = true;
        
        // Traverse all the adjacent vertices of u
        for (const auto& neighbor : graph[u]) {
            int v = neighbor.first;
            int weight = neighbor.second;
            
            // If the vertex v is not in MST and the edge weight is smaller than the current key value
            if (!inMST[v] && weight < key[v]) {
                // Update the key value of v
                key[v] = weight;
                pq.push({key[v], v});
                parent[v] = u;
            }
        }
    }
    
    // Print the edges of the MST
    cout << "Edge \tWeight\n";
    int totalCost = 0;
    for (int i = 1; i < V; ++i) {
        cout << parent[i] << " - " << i << " \t" << key[i] << endl;
        totalCost += key[i];
    }
    cout << "Total cost of the MST: " << totalCost << endl;
}

int main() {
    // Number of vertices
    int V = 6;
    
    // Adjacency list to represent the graph
    vector<vector<pair<int, int>>> graph(V);
    
    // Adding edges (u, v, weight)
    graph[0].push_back({1, 10});
    graph[0].push_back({2, 15});
    graph[1].push_back({0, 10});
    graph[1].push_back({2, 35});
    graph[1].push_back({3, 25});
    graph[2].push_back({0, 15});
    graph[2].push_back({1, 35});
    graph[2].push_back({3, 30});
    graph[3].push_back({1, 25});
    graph[3].push_back({2, 30});
    graph[3].push_back({4, 20});
    graph[4].push_back({3, 20});
    graph[4].push_back({5, 40});
    graph[5].push_back({4, 40});
    
    // Call Prim's Algorithm
    primMST(graph, V);
    
    return 0;
}
