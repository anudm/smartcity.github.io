
KRUSKAL'S ALGORITHM
#include <iostream>
using namespace std;
struct Edge {
    int u, v, weight;
};
int find(int parent[], int a, int b) {
    if (parent[a] == parent[b]) {
        return 1;  
    } else {
        return 0;  
    }
}
void unions(int parent[], int n, int a, int b) {
    int temp = parent[a];
    for (int i = 0; i < n; i++) {
        if (parent[i] == temp) {
            parent[i] = parent[b];  
        }
    }
}
void selectionSort(Edge edges[], int E) {
    for (int i = 0; i < E - 1; i++) {
        for (int j = i + 1; j < E; j++) {
            if (edges[i].weight > edges[j].weight) {
                
                Edge temp = edges[i];
                edges[i] = edges[j];
                edges[j] = temp;
            }
        }
    }
}
void kruskal(int V, int E, Edge edges[]) {
     selectionSort(edges, E);
  int parent[V];
 for (int i = 0; i < V; i++) {
        parent[i] = i;
    }
  int mstw = 0;  
  int edgeCount = 0;  
  for (int i = 0; i < E; i++) {
        int u = edges[i].u;
        int v = edges[i].v;
        int weight = edges[i].weight;
        if (!find(parent, u, v)) {  
            cout << u << " - " << v << " : " << weight << endl;
            mstw += weight;
            unions(parent, V, u, v);  
            edgeCount++;
            if (edgeCount == V - 1) {
                break;
            }
        }
    }

    cout << "Total weight: " << mstw << endl;
}

int main() {
    int V, E;
    cout << "Enter number of vertices: ";
    cin >> V;
    cout << "Enter number of edges: ";
    cin >> E;
     Edge edges[E];

    cout << "Enter edges (u, v, weight):\n";
    for (int i = 0; i < E; i++) {
        cin >> edges[i].u >> edges[i].v >> edges[i].weight;
    }

    
    kruskal(V, E, edges);

    return 0;
}
