
HEAP SORT
#include <iostream>
#include <vector>
using namespace std;
void heapBottomUp(vector<int>& H, int n) {
    for (int i = n / 2; i >= 1; --i) {
        int k = i;
        int v = H[k];
        bool heap = false;

        while (!heap && 2 * k <= n) {
            int j = 2 * k;
            if (j < n && H[j] < H[j + 1]) {
                j = j + 1;
            }
            if (v >= H[j]) {
                heap = true;
            } else {
                H[k] = H[j];
                k = j;
            }
        }
        H[k] = v;
    }
}


void heapSort(vector<int>& arr) {
    int n = arr.size() - 1; 
    heapBottomUp(arr, n);

    for (int i = n; i > 1; --i) {
        int temp = arr[1];
        arr[1] = arr[i];
        arr[i] = temp;
        heapBottomUp(arr, i - 1);
    }
}

int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;
    vector<int> arr(n + 1);
    cout << "Enter the elements: ";
    for (int i = 1; i <= n; ++i) {
        cin >> arr[i];
    }

    heapSort(arr);

    cout << "Sorted Array (Heap Sort): ";
    for (int i = 1; i <= n; ++i) {
        cout << arr[i] << " ";
    }
    return 0;
}
